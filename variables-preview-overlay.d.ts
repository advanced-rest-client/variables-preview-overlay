/**
 * DO NOT EDIT
 *
 * This file was automatically generated by
 *   https://github.com/Polymer/gen-typescript-declarations
 *
 * To modify these typings, edit the source file(s):
 *   variables-preview-overlay.html
 */

/// <reference path="../polymer/types/polymer-element.d.ts" />
/// <reference path="../polymer/types/lib/legacy/class.d.ts" />
/// <reference path="../polymer/types/lib/utils/render-status.d.ts" />
/// <reference path="../iron-overlay-behavior/iron-overlay-behavior.d.ts" />
/// <reference path="../paper-styles/shadow.d.ts" />
/// <reference path="../iron-flex-layout/iron-flex-layout.d.ts" />
/// <reference path="../paper-button/paper-button.d.ts" />

declare namespace UiElements {

  /**
   * An element to display quick preview of variables values for selected
   * environment.
   *
   * The element works with
   * [variables-manager](https://github.com/advanced-rest-client/variables-manager/)
   * that provides the events API to get information about environemnts and variables.
   *
   * The element displays an overlay controlled by `Polymer.IronOverlayBehavior`
   * with list of variables associated with current environment.
   *
   * It listens for `variables-list-changed` custom event dispatched by the
   * `variables-manager`.
   * If the event cannot be send by the application then set `variables` and
   * `environemnt` properties to the corresponding values.
   *
   * ### Example
   *
   * ```html
   * <variables-preview-overlay id="overlay"></variables-preview-overlay>
   * ```
   * ```javascript
   * document.getElementById('overlay').positionTarget = target; // HTML element
   * ```
   *
   * ### Styling
   *
   * `<variables-preview-overlay>` provides the following custom properties and
   * mixins for styling:
   *
   * Custom property | Description | Default
   * ----------------|-------------|----------
   * `--variables-preview-overlay` | Mixin applied to the element | `{}`
   * `--variables-preview-overlay-background-color` | Background color of the oberlay | `inherit`
   * `--variables-preview-overlay-dialog-color` | Overlay foreground color | `--primary-text-color`
   * `--variables-preview-overlay-title` | Mixin applied to the title element | `{}`
   */
  class VariablesPreviewOverlay extends
    Polymer.IronOverlayBehavior(
    Polymer.Element) {

    /**
     * List of variables to display on the list.
     * It is updated automatically for `variables-list-changed` event fired
     * by the `variables-manager` element.
     */
    variables: any[]|null|undefined;

    /**
     * List of system variables to display.
     */
    systemVariables: any[]|null|undefined;

    /**
     * Currently selected environment name
     */
    environment: string|null|undefined;

    /**
     * Computed value, true if the environment has any variable
     */
    readonly hasVariables: boolean|null|undefined;

    /**
     * Computed value, true if the element has application variables
     */
    readonly hasAppVariables: boolean|null|undefined;

    /**
     * Computed value, true if the element has system variables
     */
    readonly hasSysVariables: boolean|null|undefined;
    connectedCallback(): void;
    disconnectedCallback(): void;

    /**
     * Refreshes the list of variables on demand.
     *
     * @returns [description]
     */
    refresh(): any;

    /**
     * Dispatches `variable-list` custom event to ask variables manager
     * for list of variables.
     */
    _refreshVariables(): void;

    /**
     * Dispatches `environment-current` custom event to ask variables manager
     * for current environment.
     */
    _refreshEnvironment(): void;

    /**
     * Processes list of variables.
     * Sets `variables` and `systemVariables` properties.
     *
     * @param variables List of variables received from the variables
     * manager.
     */
    _processVariablesList(variables: any[]|null): void;
    _varsChanged(e: any): void;
    _varSort(a: any, b: any): any;

    /**
     * Computes value of `hasSysVariables` property.
     * Sets true if the element has system variables to display.
     *
     * @param value Application defined variables
     */
    _variablesChanged(value: any[]|null): void;

    /**
     * Computes value of `hasSysVariables` property.
     * Sets true if the element has system variables to display.
     *
     * @param value System variables.
     */
    _sysVariablesChanged(value: any[]|null): void;

    /**
     * Computes if the element has any variables to display.
     *
     * @param appVars Value of `hasAppVariables` property
     * @param sysVars Value of `hasSysVariables` property
     * @returns True if either app or system variables are set.
     */
    _computeHasVariables(appVars: Boolean|null, sysVars: Boolean|null): Boolean|null;
    _fireEdit(): void;

    /**
     * Handler for the `variable-deleted` event.
     */
    _varDeletedHandler(e: any): void;

    /**
     * Handler for the `variable-updated` event.
     */
    _varUpdateHandler(e: any): void;
  }
}

interface HTMLElementTagNameMap {
  "variables-preview-overlay": UiElements.VariablesPreviewOverlay;
}
